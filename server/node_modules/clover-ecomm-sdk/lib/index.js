'use strict';

const config = require('./config');
const EventEmitter = require('events').EventEmitter;
const resources = require('./resources');
const utils = require('./util');
Clover.DEFAULT_PORT = '443';
Clover.DEFAULT_BASE_PATH = '';
Clover.LIVE_API_BASE = 'https://ecomm-api.clover.com';
Clover.DEFAULT_API_VERSION = '2019-09-09';
Clover.DEFAULT_TIMEOUT = 30 * 1000;
Clover.DEFAULT_READ_TIMEOUT = 80 * 1000;
Clover.PACKAGE_VERSION = require('../package.json').version;
Clover.DEFAULT_CONNECT_TIMEOUT = 30 * 1000;
Clover.VERSION = '1.0.0';
Clover.apiBase = Clover.LIVE_API_BASE;
Clover.appInfo = null;
Clover.USER_AGENT_SERIALIZED = null;
Clover.MAX_NETWORK_RETRY_DELAY_SEC = 2;
Clover.INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;
Clover.resources = resources;
Clover.USER_AGENT = {
  bindings_version: Clover.PACKAGE_VERSION,
  lang: 'node',
  lang_version: process.version,
  platform: process.platform,
  publisher: 'clover',
  uname: null,
};


/**
 * Main Clover function to create CloverInstance First time
 * and to set its values.
 *
 * @param {string} accessToken
 *          Access Token Provided by the caller.
 * @param {object} options
 *          Various options passed by the caller.e.g. environment, version etc.
 *
 * @returns {object} Clover Instance Object
 *
**/
function Clover(accessToken, options) {
  const env = (options && options.environment) || 'production'; // development
  const version = options.version;


  if (!(this instanceof Clover)) {
    return new Clover(accessToken, options);
  }

  Object.defineProperty(this, '_emitter', {
    value: new EventEmitter(),
    enumerable: false,
    configurable: false,
    writable: false,
  });

  this.on = this._emitter.on.bind(this._emitter);
  this.once = this._emitter.once.bind(this._emitter);
  this.off = this._emitter.removeListener.bind(this._emitter);
  this._env = env;
  this._config = config;

  this._api = {
    auth: null,
    host: config[env].default_url,
    port: Clover.DEFAULT_PORT,
    basePath: Clover.DEFAULT_BASE_PATH,
    version: Clover.DEFAULT_API_VERSION,
    timeout: Clover.DEFAULT_TIMEOUT,
    agent: null,
    dev: false,
    maxNetworkRetries: 0,
  };

  this._prepResources();
  this.setAccessToken(accessToken);
  this.setApiVersion(version);

  this.errors = require('./Error');
  // this.webhooks = require('./Webhooks');
}

Clover.errors = require('./Error');

Clover.prototype = {
  overrideApiBase(overriddenApiBase) {
    this._apiBase = overriddenApiBase;
  },
  getApiBase() {
    return this._apiBase;
  },

  /**
 * Sets information about your application. The information is passed
 * along to Clover.
 *
 * @param {string} name
 *          Name of your application (e.g. "MyAwesomeApp")
 * @param {string} version
 *          Version of your application (e.g. "1.2.34")
 * @param {string} url
 *          Website for your application (e.g. "https://myawesomeapp.info")
 * @param {string} partnerId
 *          Your Clover Partner ID (e.g. "pp_partner_1234")
 */
  setAppInfo( name, version, url, partnerId) {
    if (appInfo) {
      this.appInfo = {};
    }
    this.appInfo.put('name', name);
    this.appInfo.put('version', version);
    this.appInfo.put('url', url);
    this.appInfo.put('partner_id', partnerId);
  },

  getAppInfo() {
    return this.appInfo;
  },

  setHost(host, port, protocol) {
    this._setApiField('host', host);
    if (port) {
      this.setPort(port);
    }
    if (protocol) {
      this.setProtocol(protocol);
    }
  },

  setProtocol(protocol) {
    this._setApiField('protocol', protocol.toLowerCase());
  },

  setPort(port) {
    this._setApiField('port', port);
  },

  setApiVersion(version) {
    if (version) {
      this._setApiField('version', version);
    }
  },

  setAccessToken(accessToken) {
    if (accessToken) {
      this._setApiField('auth', `Bearer ${accessToken}`);
      this._setApiField('access_token', `${accessToken}`);
    }
  },

  setTimeout(timeout) {
    this._setApiField('timeout', timeout || Clover.DEFAULT_TIMEOUT);
  },

  setHttpAgent(agent) {
    this._setApiField('agent', agent);
  },

  _setApiField(key, value) {
    this._api[key] = value;
  },

  getApiField(key) {
    return this._api[key];
  },

  setClientId(clientId) {
    this._clientId = clientId;
  },

  getClientId() {
    return this._clientId;
  },

  getConstant: (c) => {
    return Clover[c];
  },

  getMaxNetworkRetries() {
    return this.getApiField('maxNetworkRetries');
  },

  setMaxNetworkRetries(maxNetworkRetries) {
    if ((maxNetworkRetries && typeof maxNetworkRetries !== 'number') ||
        arguments.length < 1) {
      throw new Error('maxNetworkRetries must be a number.');
    }

    this._setApiField('maxNetworkRetries', maxNetworkRetries);
  },

  getMaxNetworkRetryDelay() {
    return this.getConstant('MAX_NETWORK_RETRY_DELAY_SEC');
  },

  getInitialNetworkRetryDelay() {
    return this.getConstant('INITIAL_NETWORK_RETRY_DELAY_SEC');
  },

  // Gets a JSON version of a User-Agent and uses a cached version for a slight
  // speed advantage.
  getClientUserAgent(cb) {
    if (Clover.USER_AGENT_SERIALIZED) {
      return cb(Clover.USER_AGENT_SERIALIZED);
    }
    this.getClientUserAgentSeeded(Clover.USER_AGENT, (cua) => {
      Clover.USER_AGENT_SERIALIZED = cua;
      cb(Clover.USER_AGENT_SERIALIZED);
    });
  },

  // Gets a JSON version of a User-Agent by encoding a seeded object and
  // fetching a uname from the system.
  getClientUserAgentSeeded(seed, cb) {
    utils.safeExec('uname -a', (err, uname) => {
      const userAgent = {};
      for (const field in seed) {
        if (Object.prototype.hasOwnProperty.call(seed, field)) {
          userAgent[field] = encodeURIComponent(seed[field]);
        }
      }

      // URI-encode in case there are unusual characters in the system's uname.
      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');

      if (this._appInfo) {
        userAgent.application = this._appInfo;
      }

      cb(JSON.stringify(userAgent));
    });
  },

  getAppInfoAsString() {
    if (!this._appInfo) {
      return '';
    }

    let formatted = this._appInfo.name;

    if (this._appInfo.version) {
      formatted += `/${this._appInfo.version}`;
    }

    if (this._appInfo.url) {
      formatted += ` (${this._appInfo.url})`;
    }

    return formatted;
  },

  setTelemetryEnabled(enableTelemetry) {
    this._enableTelemetry = enableTelemetry;
  },

  getTelemetryEnabled() {
    return this._enableTelemetry;
  },

  _prepResources() {
    for (const name in resources) {
      if (Object.prototype.hasOwnProperty.call(resources, name)) {
        this[utils.pascalToCamelCase(name)] = new resources[name](this);
      }
    }
  },
};

module.exports = Clover;
// expose constructor as a named property to enable mocking with Sinon.JS
module.exports.Clover = Clover;
