'use strict';

const utils = require('./util');

/**
 * CloverError is the base error from which all other more specific Clover errors derive.
 * Specifically for errors returned from Clover's REST API.
 */
class CloverError extends Error {
  constructor(raw = {}) {
    super(raw.message);
    // This splat is here for back-compat and should be removed in the next major version.
    this.populate(...arguments);
  }

  // Allow `new CloverFooError(raw).type === 'CloverFooError'`
  get type() {
    return this.constructor.name;
  }

  /**
   * DEPRECATED
   * This will be inlined in the constructor in the future.
   */
  populate(raw) {
    this.raw = raw;
    if (!raw || typeof raw !== 'object') {
      return;
    }

    this.rawType = raw.type;
    this.code = raw.code;
    this.param = raw.param;
    this.detail = raw.detail;
    this.headers = raw.headers;
    this.requestId = raw.requestId;
    this.statusCode = raw.statusCode;
    this.message = raw.message;
  }

  /**
   * Helper factory which takes raw clover errors and outputs wrapping instances
   */
  static generate(rawCloverError) {
    switch (rawCloverError.type) {
      case 'card_error':
        return new CloverCardError(rawCloverError);
      case 'invalid_request_error':
        return new CloverInvalidRequestError(rawCloverError);
      case 'api_error':
        return new CloverAPIError(rawCloverError);
      case 'idempotency_error':
        return new CloverIdempotencyError(rawCloverError);
      case 'invalid_grant':
        return new CloverInvalidGrantError(rawCloverError);
      default:
        return new GenericError('Generic', 'Unknown Error');
    }
  }

  /**
   * DEPRECATED
   * Please use class inheritance instead.
   */
  static extend(options) {
    const type = options.type;
    class CustomError extends CloverError {
      // eslint-disable-next-line class-methods-use-this
      get type() {
        return type;
      }
    }
    delete options.type;
    Object.assign(CustomError.prototype, options);
    return CustomError;
  }
}

// Specific Clover Error types:

/**
 * CardError is raised when a user enters a card that can't be charged for
 * some reason.
 */
class CloverCardError extends CloverError {}

/**
 * InvalidRequestError is raised when a request is initiated with invalid
 * parameters.
 */
class CloverInvalidRequestError extends CloverError {}

/**
 * APIError is a generic error that may be raised in cases where none of the
 * other named errors cover the problem. It could also be raised in the case
 * that a new error has been introduced in the API, but this version of the
 * Node.JS SDK doesn't know how to handle it.
 */
class CloverAPIError extends CloverError {}

/**
 * AuthenticationError is raised when invalid credentials are used to connect
 * to Clover's servers.
 */
class CloverAuthenticationError extends CloverError {}

/**
 * PermissionError is raised in cases where access was attempted on a resource
 * that wasn't allowed.
 */
class CloverPermissionError extends CloverError {}

/**
 * RateLimitError is raised in cases where an account is putting too much load
 * on Clover's API servers (usually by performing too many requests). Please
 * back off on request rate.
 */
class CloverRateLimitError extends CloverError {}

/**
 * CloverConnectionError is raised in the event that the SDK can't connect to
 * Clover's servers. That can be for a variety of different reasons from a
 * downed network to a bad TLS certificate.
 */
class CloverConnectionError extends CloverError {}

/**
 * IdempotencyError is raised in cases where an idempotency key was used
 * improperly.
 */
class CloverIdempotencyError extends CloverError {}

/**
 * InvalidGrantError is raised when a specified code doesn't exist, is
 * expired, has been used, or doesn't belong to you; a refresh token doesn't
 * exist, or doesn't belong to you; or if an API key's mode (live or test)
 * doesn't match the mode of a code or refresh token.
 */
class CloverInvalidGrantError extends CloverError {}

/**
 * DEPRECATED
 * This is here for backwards compatibility and will be removed in the next major version.
 */
function _Error(raw) {
  this.populate(...arguments);
  this.stack = new Error(this.message).stack;
}
_Error.prototype = Object.create(Error.prototype);
_Error.prototype.type = 'GenericError';
_Error.prototype.populate = function(type, message) {
  this.type = type;
  this.message = message;
};
_Error.extend = utils.protoExtend;

/**
 * DEPRECATED.
 * Do not use the default export; it may be removed or change in a future version.
 */
module.exports = _Error;

module.exports.CloverError = CloverError;
module.exports.CloverCardError = CloverCardError;
module.exports.CloverInvalidRequestError = CloverInvalidRequestError;
module.exports.CloverAPIError = CloverAPIError;
module.exports.CloverAuthenticationError = CloverAuthenticationError;
module.exports.CloverPermissionError = CloverPermissionError;
module.exports.CloverRateLimitError = CloverRateLimitError;
module.exports.CloverConnectionError = CloverConnectionError;
module.exports.CloverIdempotencyError = CloverIdempotencyError;
module.exports.CloverInvalidGrantError = CloverInvalidGrantError;
