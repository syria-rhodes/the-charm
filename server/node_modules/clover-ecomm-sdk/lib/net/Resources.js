'use strict';

const http = require('http');
const https = require('https');
const path = require('path');
const utils = require('../util');
const Error = require('../Error');

const defaultHttpAgent = new http.Agent({
  keepAlive: true,
});
const defaultHttpsAgent = new https.Agent({
  keepAlive: true,
});

// Provide extension mechanism for Clover Resource Sub-Classes
Resources.extend = utils.protoExtend;
// Expose method-creator & prepared (basic) methods
Resources.method = require('./ResourceMethod');
Resources.BASIC_METHODS = require('./ResourceBasicMethod');
Resources.MAX_BUFFERED_REQUEST_METRICS = 100;

/**
 * Encapsulates request logic for a Clover Resource
 */
function Resources(cloverObj, deprecatedUrlData) {
  this._cloverObj = cloverObj;

  if (deprecatedUrlData) {
    throw new Error(
        'Support for curried url params was dropped. Instead, pass two ids.',
    );
  }

  this.basePath = utils.makeURLInterpolator(
      this.basePath || cloverObj.getApiField('basePath'),
  );
  this.resourcePath = this.path;
  this.path = utils.makeURLInterpolator(this.path);

  if (this.includeBasic) {
    this.includeBasic.forEach(function(methodName) {
      this[methodName] = Resources.BASIC_METHODS[methodName];
    }, this);
  }

  this.initialize(...arguments);
}

Resources.prototype = {
  path: '',

  // Methods that don't use the API's default '/v1' path can override it with this setting.
  basePath: null,

  initialize() {},

  // Function to override the default data processor. This allows full control
  // over how a Clover Resource's request data will get converted into an HTTP
  // body. This is useful for non-standard HTTP requests. The function should
  // take method name, data, and headers as arguments.
  requestDataProcessor: null,

  // Function to add a validation checks before sending the request, errors should
  // be thrown, and they will be passed to the callback/promise.
  validateRequest: null,

  createFullPath(commandPath, urlData) {
    return path
        .join(
            this.basePath(urlData),
            this.path(urlData),
            typeof commandPath == 'function' ? commandPath(urlData) : commandPath,
        )
        .replace(/\\/g, '/'); // ugly workaround for Windows
  },

  // Creates a relative resource path with symbols left in (unlike
  // createFullPath which takes some data to replace them with). For example it
  // might produce: /invoices/{id}
  createResourcePathWithSymbols(pathWithSymbols) {
    return `/${path
        .join(this.resourcePath, pathWithSymbols || '')
        .replace(/\\/g, '/')}`; // ugly workaround for Windows
  },

  // DEPRECATED: Here for backcompat in case users relied on this.
  wrapTimeout: utils.callbackifyPromiseWithTimeout,

  _responseHandler(req, callback) {
    return (res) => {
      let response = '';

      res.setEncoding('utf8');
      res.on('data', (chunk) => {
        response += chunk;
      });
      res.once('end', () => {
        const headers = res.headers || {};
        res.requestId = headers['request-id'];

        const requestEndTime = Date.now();
        const requestDurationMs = requestEndTime - req._requestStart;

        const responseEvent = utils.removeNullish({
          method: req._requestEvent.method,
          path: req._requestEvent.path,
          status: res.statusCode,
          request_id: res.requestId,
          elapsed: requestDurationMs,
          request_start_time: req._requestStart,
          request_end_time: requestEndTime,
        });

        this._cloverObj._emitter.emit('response', responseEvent);

        try {
          response = JSON.parse(response);

          if (response.message) {
            let err;

            // Convert OAuth error responses into a standard format
            // so that the rest of the error logic can be shared
            if (typeof response.message === 'string') {
              response.message = {
                type: response.message,
                message: response.error_description,
              };
            }

            response.message.headers = headers;
            response.message.statusCode = res.statusCode;
            response.message.requestId = res.requestId;

            if (res.statusCode === 401) {
              err = new Error.CloverAuthenticationError(response.message);
            } else if (res.statusCode === 403) {
              err = new Error.CloverPermissionError(response.error);
            } else if (res.statusCode === 429) {
              err = new Error.CloverRateLimitError(response.error);
            } else {
              err = Error.CloverError.generate(response.error);
            }
            return callback.call(this, err, null);
          }
        } catch (e) {
          return callback.call(
              this,
              new Error.CloverAPIError({
                message: 'Invalid JSON received from the Clover API',
                response,
                exception: e,
                requestId: headers['request-id'],
              }),
              null,
          );
        }

        this._recordRequestMetrics(res.requestId, requestDurationMs);

        // Expose res object
        Object.defineProperty(response, 'lastResponse', {
          enumerable: false,
          writable: false,
          value: res,
        });
        callback.call(this, null, response);
      });
    };
  },

  _generateConnectionErrorMessage(requestRetries) {
    return `An error occurred with our connection to Clover.${
            requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''
    }`;
  },

  _errorHandler(req, requestRetries, callback) {
    return (error) => {
      if (req._isAborted) {
        // already handled
        return;
      }
      callback.call(
          this,
          new Error.CloverConnectionError({
            message: this._generateConnectionErrorMessage(requestRetries),
            detail: error,
          }),
          null,
      );
    };
  },

  _shouldRetry(res, numRetries) {
    // Do not retry if we are out of retries.
    if (numRetries >= this._cloverObj.getMaxNetworkRetries()) {
      return false;
    }

    // Retry on connection error.
    if (!res) {
      return true;
    }

    // Retry on conflict and availability errors.
    if (res.statusCode === 409 || res.statusCode === 503) {
      return true;
    }

    if (res.statusCode >= 500 && res.req._requestEvent.method !== 'POST') {
      return true;
    }

    return false;
  },

  _getSleepTimeInMS(numRetries) {
    const initialNetworkRetryDelay = this._cloverObj.getInitialNetworkRetryDelay();
    const maxNetworkRetryDelay = this._cloverObj.getMaxNetworkRetryDelay();

    // Apply exponential backoff with initialNetworkRetryDelay on the
    // number of numRetries so far as inputs. Do not allow the number to exceed
    // maxNetworkRetryDelay.
    let sleepSeconds = Math.min(
        initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),
        maxNetworkRetryDelay,
    );

    // Apply some jitter by randomizing the value in the range of
    // (sleepSeconds / 2) to (sleepSeconds).
    sleepSeconds *= 0.5 * (1 + Math.random());

    // But never sleep less than the base sleep seconds.
    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);

    return sleepSeconds * 1000;
  },
  _makeHeaders(
      auth,
      contentLength,
      apiVersion,
      clientUserAgent,
      method,
      userSuppliedHeaders,
  ) {
    const defaultHeaders = {
      // Use specified auth token or use default from this clover instance:
      'Authorization': auth ? `Bearer ${auth}` : this._cloverObj.getApiField('auth'),
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Content-Length': contentLength,
    };

    return Object.assign(
        utils.removeNullish(defaultHeaders),
        utils.normalizeHeaders(userSuppliedHeaders),
    );
  },

  _getUserAgentString() {
    const packageVersion = this._cloverObj.getConstant('PACKAGE_VERSION');
    const appInfo = this._cloverObj._appInfo ?
            this._cloverObj.getAppInfoAsString() :
            '';

    return `Clover/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();
  },

  _getTelemetryHeader() {
    if (
      this._cloverObj.getTelemetryEnabled() &&
            this._cloverObj._prevRequestMetrics.length > 0
    ) {
      const metrics = this._cloverObj._prevRequestMetrics.shift();
      return JSON.stringify({
        last_request_metrics: metrics,
      });
    }
  },

  _recordRequestMetrics(requestId, requestDurationMs) {
    if (this._cloverObj.getTelemetryEnabled() && requestId) {
      if (
        this._cloverObj._prevRequestMetrics.length >
                Resources.MAX_BUFFERED_REQUEST_METRICS
      ) {
        utils.emitWarning(
            'Request metrics buffer is full, dropping telemetry message.',
        );
      } else {
        this._cloverObj._prevRequestMetrics.push({
          request_id: requestId,
          request_duration_ms: requestDurationMs,
        });
      }
    }
  },

  _request(method, host, path, data, auth, options, callback) {
    let requestData;

    const retryRequest = (requestFn, apiVersion, headers, requestRetries) => {
      return setTimeout(
          requestFn,
          this._getSleepTimeInMS(requestRetries),
          apiVersion,
          headers,
          requestRetries + 1,
      );
    };

    const makeRequest = (apiVersion, headers, numRetries) => {
      const isInsecureConnection = this._cloverObj.getApiField('protocol') === 'http';
      let agent = this._cloverObj.getApiField('agent');

      if (agent == null) {
        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;
      }

      if (method === 'GET') {
        headers['Content-Length'] = 0;
      }

      const req = (isInsecureConnection ? http : https).request({
        host: host || this._cloverObj.getApiField('host'),
        port: this._cloverObj.getApiField('port'),
        path,
        method,
        agent,
        headers,
        // ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',
      });

      const requestStartTime = Date.now();

      const requestEvent = utils.removeNullish({
        api_version: apiVersion,
        account: headers['Clover-Account'],
        method,
        path,
        request_start_time: requestStartTime,
      });

      const requestRetries = numRetries || 0;

      req._requestEvent = requestEvent;

      req._requestStart = requestStartTime;


      req.once('response', (res) => {
        if (this._shouldRetry(res, requestRetries)) {
          return retryRequest(makeRequest, apiVersion, headers, requestRetries);
        } else {
          return this._responseHandler(req, callback)(res);
        }
      });

      req.on('error', (error) => {
        if (this._shouldRetry(null, requestRetries)) {
          return retryRequest(makeRequest, apiVersion, headers, requestRetries);
        } else {
          return this._errorHandler(req, requestRetries, callback)(error);
        }
      });

      req.once('socket', (socket) => {
        if (socket.connecting) {
          socket.once(
                        isInsecureConnection ? 'connect' : 'secureConnect',
                        () => {
                          // Send payload; we're safe:
                          req.write(requestData);
                          req.end();
                        },
          );
        } else {
          // we're already connected
          req.write(requestData);
          req.end();
        }
      });
    };

    const prepareAndMakeRequest = (error, data) => {
      if (error) {
        return callback(error);
      }

      requestData = data;

      this._cloverObj.getClientUserAgent((clientUserAgent) => {
        const apiVersion = this._cloverObj.getApiField('version');
        const headers = this._makeHeaders(
            auth,
            requestData.length,
            apiVersion,
            clientUserAgent,
            method,
            options.headers,
        );

        makeRequest(apiVersion, headers);
      });
    };

    if (this.requestDataProcessor) {
      this.requestDataProcessor(
          method,
          data,
          options.headers,
          prepareAndMakeRequest,
      );
    } else {
      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));
    }
  },
};

module.exports = Resources;
